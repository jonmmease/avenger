import { Ticks, Nice } from '.';

// Input props
in val domain: [0, 1];
in val range: [0, 1];
in val nice: 0;

// final domain, applying nice if required
out val final_domain: case
    when @nice > 0 then @_nice.nice_domain
    else @domain end;

// External function to perform scaling
create function scale(domain_expr double) returns double
    return @scale_factor * $1 + @offset

// expose ticks array scalar and ticks dataset
out val ticks_array: @_ticks.ticks_array;
out dataset ticks: SELECT * FROM @_ticks.ticks;

// Helpers to build nice extents
val count: @nice::double;

val scale_factor: (@range[2] - @range[1]) / (@final_domain[2] - @final_domain[1]);
val offset: @range[1] - @scale_factor * @final_domain[1];

// put internal helpers in inner group
comp _nice: Nice {
    domain := @parent.domain;
    count := @parent.count;
}

// Component for computing ticks dataset
comp _ticks: Ticks {
    domain := @final_domain;
    count := @parent.count;
}
