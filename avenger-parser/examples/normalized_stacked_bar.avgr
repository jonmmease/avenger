import { Dropdown, HorizontalLayout, VerticalLayout, Group, Chart, Legend } from 'avenger-components';

component Chart {
    title: 'Stacked Bar Chart';

    dropdown := Dropdown {
        options: ['normalize', 'zero'];
        value: 'normalize';
    }

    dataset movies: 
        WITH t1 as (
            SELECT "Creative Genre", "MPAA Rating", count(*) as count 
            FROM load_json('https://raw.githubusercontent.com/vega/vega-datasets/master/data/movies.json')
            GROUP BY 1, 2
        )
        -- stack is the function defined below
        SELECT * FROM @stack(  
            t1,
            field:="count", 
            groupby:=["Creative Genre"], 
            sort_by:=[{field: "MPAA Rating", direction: 'asc'}],
            offset:=@dropdown.value,
            as_value:="bar_height",
            as_end:="bar_end"
        );

    HorizontalLayout {
        Group {
            preferred_width: 400;
            preferred_height: 400;

            // Let chart area stretch to fill the available space
            horizontal_stretch: 1;

            x_scale := BandScale {
                range: [0, @width];
                domain: SELECT distinct "Creative Genre" FROM @movies order by "Creative Genre" asc;
                // domain: (SELECT array_agg(distinct "Creative Genre" order by "Creative Genre" asc) FROM @movies);
                padding: 0.1;
            }

            y_scale := LinearScale {
                // parent is the Group component, height is an `out` parameter on the Group
                range: [@parent.height, 0];
                domain: [0, (SELECT max(bar_end) FROM @movies)];
            }

            fill_scale := OrdinalScale {
                domain: 
                    (SELECT array_agg(
                        distinct "MPAA Rating" 
                        order by CASE
                            WHEN "MPAA Rating" = 'PG' THEN 1 
                            WHEN "MPAA Rating" = 'PG-13' THEN 2 
                            WHEN "MPAA Rating" = 'R' THEN 3 
                            WHEN "MPAA Rating" = 'NC-17' THEN 4 
                            WHEN "MPAA Rating" = 'Open' THEN 5 
                            WHEN "MPAA Rating" = 'Not Rated' THEN 6 
                            ELSE 100 END asc
                        )
                    FROM @movies);
                scheme: "tableau10";
            }

            Bar {
                data: @movies;
                // the scale method is defined inside the scale component
                x: @x_scale.scale("Creative Genre");
                x2: @x_scale.scale("Creative Genre") + @x_scale.bandwidth;
                y: @y_scale.scale("bar_end" - "bar_height");
                y2: @y_scale.scale("bar_end");
                fill: @fill_scale.scale("MPAA Rating");
            }

            Axis {
                orient: left;
                scale: y_scale;
                width: @parent.width;
                height: @parent.height;
                title: 'Proportion of Movie Counts';
            }
            
            Axis {
                orient: bottom;
                scale: x_scale;
                width: @parent.width;
                height: @parent.height;
                title: 'Creative Genre';
            }
        }
        VerticalLayout {
            // Legend doesn't stretch to fill the available space horizontally
            horizontal_stretch: 0;

            Legend {
                data: @movies;
                fill: @fill_scale;
                orient: 'right';
                title: 'MPAA Rating';
            }
        }
    }
}


// Functions that return a dataset are used as table functions
fn stack (
    dataset ds;
    expr field;
    expr groupby: null;
    param<StackOffset> offset: 'zero';
    param sortby: null;
    expr as_value: 'yheight';
    expr as_end: 'y2'
) -> dataset {
    match(offset) {
        'normalize' => {
            SELECT *,
                sum(@field) over (
                    order by @sortby
                    partition by @groupby
                    rows between unbounded preceding and current row
                ) / sum(1.0 * @field) over (partition by @groupby) as @as_end,
                @field / sum(1.0 * @field) over (partition by @groupby) as @as_value
                FROM @ds;
        }
        'zero' => {
            SELECT *, 
                sum(@field) over (
                    order by @sortby
                    partition by @groupby
                    rows between unbounded preceding and current row
                ) as @as_end,
                @field as @as_value
                FROM @ds;
        }
        'center' => {
            // ...
        }
    }
}


component LinearScale {
    in param domain;
    in param range;

    out fn scale(self; param value) -> param {
        @self.range[0] 
            + (@self.range[1] - @self.range[0]) 
            * (@value - @self.domain[0]) / (@self.domain[1] - @self.domain[0]);
    }
}

component BandScale {
    in param domain;
    in param range;
    
    out fn scale(self; param value) -> param {
        // TODO
    }
}

component Axis {
    // Required in params
    in param orient;
    in param scale;
    in param width;
    in param height;
    
    // Optional in params
    in param title: null;
    in param tick_length: 5;
    in param tick_font_size: 12;
    in param show_grid: true;

    match (orient) {
        'left' => {
            Rule {
                x: 0;
                x2: @width;
                y: @height;
                y2: @height;
            }
            Rule {
                // scale.ticks_data is a dataset with "value" and "label" columns
                data: @scale.ticks_data;
                x: "value";
                x2: "value";
                y: @height;
                y2: @height + @tick_length;
            }
            tick_labels := Text {
                data: @scale.ticks_data;
                x: "value";
                y: @height + @tick_length;
                text: "label";
            }
            Text {
                x: @width / 2;
                // Marks have a bbox output param
                y: @tick_labels.bbox.bottom + 2;
                horizontal_align: 'center';
                vertical_align: 'top';
                font_weight: 'bold';
                text: @title;
            }
            if (@show_grid) {
                // ...
            }
        }
        'right' => {
            // ...
        }
        'top' => {
            // ...
        }
        'bottom' => {
            // ...
        }            
    }
}
