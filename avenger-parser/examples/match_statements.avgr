// This is a test file for match statements
import { Button, Icon } from './components/ui.avgr';

Chart {
    width: 800;
    height: 600;
    
    // Basic match statement
    match (charttype) {
        'bar' => {
            BarChart {
                data: 'data.csv';
                color: 'steelblue';
            }
        }
        'line' => {
            LineChart {
                data: 'data.csv';
                color: 'orange';
                strokeWidth: 2;
            }
        }
        'pie' => {
            PieChart {
                data: 'data.csv';
                innerRadius: 0;
                outerRadius: 100;
            }
        }
        'scatter' => {
            ScatterPlot {
                data: 'data.csv';
                pointSize: 5;
            }
        }
        _ => {
            Text {
                x: 400;
                y: 300;
                text: 'Unknown chart type';
                fontSize: 20;
                align: 'center';
            }
        }
    }
    
    // Match with private parameter
    match (theme) {
        'light' => {
            param<String> bgcolor: 'white';
            param<String> textcolor: 'black';
            
            Background {
                fill: bgcolor;
            }
            
            Legend {
                labelColor: textcolor;
            }
        }
        'dark' => {
            param<String> bgcolor: '#333333';
            param<String> textcolor: 'white';
            
            Background {
                fill: bgcolor;
            }
            
            Legend {
                labelColor: textcolor;
            }
        }
        'colorful' => {
            Background {
                fill: 'linear-gradient(blue, purple)';
            }
            
            Legend {
                labelColor: 'yellow';
            }
        }
    }
    
    // Nested match statement
    Group {
        x: 10;
        y: 10;
        
        match (status) {
            'loading' => {
                Spinner {
                    size: 24;
                    color: 'blue';
                }
                
                Text {
                    x: 30;
                    y: 12;
                    text: 'Loading data...';
                }
            }
            'success' => {
                Icon {
                    type: 'check';
                    color: 'green';
                }
                
                Text {
                    x: 30;
                    y: 12;
                    text: 'Data loaded successfully';
                }
                
                // Nested match for success details
                match (datasize) {
                    'small' => {
                        Text {
                            x: 30;
                            y: 30;
                            text: 'Small dataset loaded';
                        }
                    }
                    'large' => {
                        Text {
                            x: 30;
                            y: 30;
                            text: 'Large dataset loaded - performance may be affected';
                        }
                    }
                }
            }
            'error' => {
                Icon {
                    type: 'error';
                    color: 'red';
                }
                
                Text {
                    x: 30;
                    y: 12;
                    text: 'Error loading data';
                }
            }
        }
    }
}

// Another component with match statements
export component StatusIndicator {
    status: 'pending';
    size: 16;
    
    match (status) {
        'pending' => {
            Circle {
                cx: 0;
                cy: 0;
                r: size;
                fill: 'gray';
            }
        }
        'processing' => {
            Circle {
                cx: 0;
                cy: 0;
                r: size;
                fill: 'blue';
            }
        }
        'done' => {
            Circle {
                cx: 0;
                cy: 0;
                r: size;
                fill: 'green';
            }
        }
        'failed' => {
            Circle {
                cx: 0;
                cy: 0;
                r: size;
                fill: 'red';
            }
        }
    }
} 